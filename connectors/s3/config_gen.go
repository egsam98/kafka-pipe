// Code generated by Warden. DO NOT EDIT.

package s3

import (
	warden "github.com/egsam98/warden"
	"net/url"
	"strconv"
)

func (self *SinkConfig) Validate() error {
	var errs warden.Errors
	if self.Name == "" {
		errs.Add("name", warden.Error("required"))
	}
	errs.Add("kafka", self.Kafka.Validate())
	errs.Add("s3", self.S3.Validate())
	if self.GroupTimeInterval == 0 {
		self.GroupTimeInterval = 3600000000000 // 1h
	}
	if self.DB == nil {
		errs.Add("DB", warden.Error("required"))
	}
	return errs.AsError()
}

func (self *ConnConfig) Validate() error {
	var errs warden.Errors
	if self.Endpoint == "" {
		errs.Add("endpoint", warden.Error("required"))
	}
	if self.Bucket == "" {
		errs.Add("bucket", warden.Error("required"))
	}
	if self.ID == "" {
		errs.Add("id", warden.Error("required"))
	}
	if self.Secret == "" {
		errs.Add("secret", warden.Error("required"))
	}
	return errs.AsError()
}

func (self *BackupConfig) Validate() error {
	var errs warden.Errors
	if self.Name == "" {
		errs.Add("name", warden.Error("required"))
	}
	errs.Add("kafka", self.Kafka.Validate())
	if len(self.Topics) == 0 {
		errs.Add("topics", warden.Error("must be non empty"))
	}
	if self.DateSince.IsZero() {
		errs.Add("DateSince", warden.Error("required"))
	}
	if self.DateTo.IsZero() {
		errs.Add("DateTo", warden.Error("required"))
	}
	if self.DB == nil {
		errs.Add("DB", warden.Error("required"))
	}
	return errs.AsError()
}

func (self *KafkaConfig) Validate() error {
	var errs warden.Errors
	if len(self.Brokers) == 0 {
		errs.Add("brokers", warden.Error("must be non empty"))
	}
	errs.Add("brokers", func() error {
		var errs warden.Errors
		for i, elem := range self.Brokers {
			if _, err := url.Parse(elem); err != nil {
				errs.Add(strconv.Itoa(i), warden.Error("must be URL"))
			}
		}
		return errs.AsError()
	}())
	errs.Add("batch", self.Batch.Validate())
	return errs.AsError()
}
