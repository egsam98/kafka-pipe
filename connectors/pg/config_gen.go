// Code generated by Warden. DO NOT EDIT.

package pg

import (
	warden "github.com/egsam98/warden"
	"net/url"
)

func (self *SourceConfig) Validate() error {
	var errs warden.Errors
	if self.Name == "" {
		errs.Add("name", warden.Error("required"))
	}
	errs.Add("pg", func() error {
		self := &self.Pg
		var errs warden.Errors
		if _, err := url.Parse(self.Url); err != nil {
			errs.Add("url", warden.Error("must be URL"))
		}
		if self.Publication == "" {
			errs.Add("publication", warden.Error("required"))
		}
		if self.Slot == "" {
			errs.Add("slot", warden.Error("required"))
		}
		if len(self.Tables) == 0 {
			errs.Add("tables", warden.Error("must be non empty"))
		}
		if self.HealthTable == "" {
			self.HealthTable = "public.pipe_health"
		}
		return errs.AsError()
	}())
	errs.Add("kafka", self.Kafka.Validate())
	if self.DB == nil {
		errs.Add("DB", warden.Error("required"))
	}
	return errs.AsError()
}

func (self *SnapshotConfig) Validate() error {
	var errs warden.Errors
	errs.Add("pg", func() error {
		self := &self.Pg
		var errs warden.Errors
		if _, err := url.Parse(self.Url); err != nil {
			errs.Add("url", warden.Error("must be URL"))
		}
		if len(self.Tables) == 0 {
			errs.Add("tables", warden.Error("must be non empty"))
		}
		return errs.AsError()
	}())
	errs.Add("kafka", self.Kafka.Validate())
	return errs.AsError()
}
